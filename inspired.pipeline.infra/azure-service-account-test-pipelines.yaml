trigger:
- main

pool:
  name: devops-agentpool
  demands:
   - agent.name -equals devops-agent


# Define Variables for Environments
variables:
- name: DEV_ENVIRONMENT
  value: test
- name: QA_ENVIRONMENT
  value: uat  

# Stage-1: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline 
## Step-2: Install Latest Terraform 
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)

stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/inspired.pipeline.infra/accounts/test' 
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: TerraformInstaller@0
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'
      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/inspired.pipeline.infra/accounts/test'
          backendType: 'azurerm'
          backendServiceArm: 'terraform-aks-azurerm-svc-con'
          backendAzureRmResourceGroupName: 'terraform-storage-rg'
          backendAzureRmStorageAccountName: 'sroterraformstatex'
          backendAzureRmContainerName: 'tfstateaks'
          backendAzureRmKey: 'test-service-account.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/inspired.pipeline.infra/accounts/test'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Plan
        inputs:
          command: 'plan'
          #workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
          workingDirectory: '$(System.DefaultWorkingDirectory)/inspired.pipeline.infra/accounts/test'
          environmentServiceName: 'terraform-aks-azurerm-svc-con'
          commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Apply
        inputs:
          command: 'apply'
          #workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
          workingDirectory: '$(System.DefaultWorkingDirectory)/inspired.pipeline.infra/accounts/test'
          environmentServiceName: 'terraform-aks-azurerm-svc-con'
          commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
          allowTelemetryCollection: false